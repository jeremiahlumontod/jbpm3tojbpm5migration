////////////////////////////////////////////////////////////////////////
//
// jbpm5v22.java
//
// This file was generated by XMLSpy 2009sp1 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//
////////////////////////////////////////////////////////////////////////

package com.jbpm5v2;


public class jbpm5v22 extends com.migration.xml.TypeBase
{
		public static com.migration.xml.meta.ComplexType getStaticInfo() { return new com.migration.xml.meta.ComplexType(com.jbpm5v2.jbpm5v2_TypeInfo.binder.getTypes()[com.jbpm5v2.jbpm5v2_TypeInfo._altova_ti_altova_jbpm5v22]); }

	public static jbpm5v22 loadFromFile(String filename) throws Exception
	{
		return new jbpm5v22(com.migration.xml.XmlTreeOperations.loadDocument(filename));			
	}

	public static jbpm5v22 loadFromString(String xmlstring) throws Exception
	{
		return new jbpm5v22(com.migration.xml.XmlTreeOperations.loadXml(xmlstring));			
	}

	public static jbpm5v22 loadFromBinary(byte[] binary) throws Exception
	{
		return new jbpm5v22(com.migration.xml.XmlTreeOperations.loadXmlBinary(binary));
	}

	public void saveToFile(String filename, boolean prettyPrint) throws Exception
	{
		saveToFile(filename, prettyPrint, "UTF-8", false, false);
	}
	
	public void saveToFile(String filename, boolean prettyPrint, String encoding) throws Exception
	{
		saveToFile( filename, prettyPrint, encoding, encoding.compareToIgnoreCase("UTF-16BE") == 0, encoding.compareToIgnoreCase("UTF-16") == 0 );
	}

	public void saveToFile(String filename, boolean prettyPrint, String encoding, boolean bBigEndian, boolean bBOM) throws Exception
	{
		org.w3c.dom.Document doc = (org.w3c.dom.Document) getNode();
		com.migration.xml.XmlTreeOperations.saveDocument(doc, filename, encoding, bBigEndian, bBOM, prettyPrint);
	}

	public String saveToString(boolean prettyPrint) throws Exception
	{
		org.w3c.dom.Document doc = (org.w3c.dom.Document) getNode();
		return com.migration.xml.XmlTreeOperations.saveXml(doc, prettyPrint);
	}

	public byte[] saveToBinary(boolean prettyPrint) throws Exception
	{
		return saveToBinary(prettyPrint, "UTF-8", false, false);
	}
	
	public byte[] saveToBinary(boolean prettyPrint, String encoding) throws Exception
	{
		return saveToBinary( prettyPrint, encoding, encoding.compareToIgnoreCase("UTF-16BE") == 0, encoding.compareToIgnoreCase("UTF-16") == 0 );
	}

	public byte[] saveToBinary(boolean prettyPrint, String encoding, boolean bBigEndian, boolean bBOM) throws Exception
	{
		org.w3c.dom.Document doc = (org.w3c.dom.Document) getNode();
		return com.migration.xml.XmlTreeOperations.saveXmlBinary(doc, encoding, bBigEndian, bBOM, prettyPrint);
	}

	public static jbpm5v22 createDocument() throws Exception
	{
		org.w3c.dom.Document doc = com.migration.xml.XmlTreeOperations.createDocument();
		return new jbpm5v22(doc);
	}

	public void setSchemaLocation(String schemaLocation) throws Exception
	{
		org.w3c.dom.Document doc = (org.w3c.dom.Document) node;
		if (doc.getDocumentElement() == null)
			throw new Exception("SetSchemaLocation requires a root element.");
		String namespaceuri = doc.getDocumentElement().getNamespaceURI();
		if (namespaceuri == null || namespaceuri.length() == 0)
			doc.getDocumentElement().setAttributeNS("http://www.w3.org/2001/XMLSchema-instance", "noNamespaceSchemaLocation", schemaLocation);
		else
			doc.getDocumentElement().setAttributeNS("http://www.w3.org/2001/XMLSchema-instance", "schemaLocation", namespaceuri + " " + schemaLocation);
	}

	
	public jbpm5v22(org.w3c.dom.Node init)
	{
		super(init);
		instantiateMembers();
	}
	
	private void instantiateMembers()
	{

		onEntry_script= new MemberElement_onEntry_script (this, com.jbpm5v2.jbpm5v2_TypeInfo.binder.getMembers()[com.jbpm5v2.jbpm5v2_TypeInfo._altova_mi_altova_jbpm5v22._onEntry_script]);
		onExit_script= new MemberElement_onExit_script (this, com.jbpm5v2.jbpm5v2_TypeInfo.binder.getMembers()[com.jbpm5v2.jbpm5v2_TypeInfo._altova_mi_altova_jbpm5v22._onExit_script]);
		script= new MemberElement_script (this, com.jbpm5v2.jbpm5v2_TypeInfo.binder.getMembers()[com.jbpm5v2.jbpm5v2_TypeInfo._altova_mi_altova_jbpm5v22._script]);
		BPMNDiagram= new MemberElement_BPMNDiagram (this, com.jbpm5v2.jbpm5v2_TypeInfo.binder.getMembers()[com.jbpm5v2.jbpm5v2_TypeInfo._altova_mi_altova_jbpm5v22._BPMNDiagram]);
		BPMNEdge= new MemberElement_BPMNEdge (this, com.jbpm5v2.jbpm5v2_TypeInfo.binder.getMembers()[com.jbpm5v2.jbpm5v2_TypeInfo._altova_mi_altova_jbpm5v22._BPMNEdge]);
		BPMNPlane= new MemberElement_BPMNPlane (this, com.jbpm5v2.jbpm5v2_TypeInfo.binder.getMembers()[com.jbpm5v2.jbpm5v2_TypeInfo._altova_mi_altova_jbpm5v22._BPMNPlane]);
		BPMNShape= new MemberElement_BPMNShape (this, com.jbpm5v2.jbpm5v2_TypeInfo.binder.getMembers()[com.jbpm5v2.jbpm5v2_TypeInfo._altova_mi_altova_jbpm5v22._BPMNShape]);
		assignment= new MemberElement_assignment (this, com.jbpm5v2.jbpm5v2_TypeInfo.binder.getMembers()[com.jbpm5v2.jbpm5v2_TypeInfo._altova_mi_altova_jbpm5v22._assignment]);
		conditionExpression= new MemberElement_conditionExpression (this, com.jbpm5v2.jbpm5v2_TypeInfo.binder.getMembers()[com.jbpm5v2.jbpm5v2_TypeInfo._altova_mi_altova_jbpm5v22._conditionExpression]);
		dataInput= new MemberElement_dataInput (this, com.jbpm5v2.jbpm5v2_TypeInfo.binder.getMembers()[com.jbpm5v2.jbpm5v2_TypeInfo._altova_mi_altova_jbpm5v22._dataInput]);
		dataInputAssociation= new MemberElement_dataInputAssociation (this, com.jbpm5v2.jbpm5v2_TypeInfo.binder.getMembers()[com.jbpm5v2.jbpm5v2_TypeInfo._altova_mi_altova_jbpm5v22._dataInputAssociation]);
		dataInputRefs= new MemberElement_dataInputRefs (this, com.jbpm5v2.jbpm5v2_TypeInfo.binder.getMembers()[com.jbpm5v2.jbpm5v2_TypeInfo._altova_mi_altova_jbpm5v22._dataInputRefs]);
		dataOutput= new MemberElement_dataOutput (this, com.jbpm5v2.jbpm5v2_TypeInfo.binder.getMembers()[com.jbpm5v2.jbpm5v2_TypeInfo._altova_mi_altova_jbpm5v22._dataOutput]);
		dataOutputAssociation= new MemberElement_dataOutputAssociation (this, com.jbpm5v2.jbpm5v2_TypeInfo.binder.getMembers()[com.jbpm5v2.jbpm5v2_TypeInfo._altova_mi_altova_jbpm5v22._dataOutputAssociation]);
		dataOutputRefs= new MemberElement_dataOutputRefs (this, com.jbpm5v2.jbpm5v2_TypeInfo.binder.getMembers()[com.jbpm5v2.jbpm5v2_TypeInfo._altova_mi_altova_jbpm5v22._dataOutputRefs]);
		definitions= new MemberElement_definitions (this, com.jbpm5v2.jbpm5v2_TypeInfo.binder.getMembers()[com.jbpm5v2.jbpm5v2_TypeInfo._altova_mi_altova_jbpm5v22._definitions]);
		endEvent= new MemberElement_endEvent (this, com.jbpm5v2.jbpm5v2_TypeInfo.binder.getMembers()[com.jbpm5v2.jbpm5v2_TypeInfo._altova_mi_altova_jbpm5v22._endEvent]);
		exclusiveGateway= new MemberElement_exclusiveGateway (this, com.jbpm5v2.jbpm5v2_TypeInfo.binder.getMembers()[com.jbpm5v2.jbpm5v2_TypeInfo._altova_mi_altova_jbpm5v22._exclusiveGateway]);
		extensionElements= new MemberElement_extensionElements (this, com.jbpm5v2.jbpm5v2_TypeInfo.binder.getMembers()[com.jbpm5v2.jbpm5v2_TypeInfo._altova_mi_altova_jbpm5v22._extensionElements]);
		formalExpression= new MemberElement_formalExpression (this, com.jbpm5v2.jbpm5v2_TypeInfo.binder.getMembers()[com.jbpm5v2.jbpm5v2_TypeInfo._altova_mi_altova_jbpm5v22._formalExpression]);
		from= new MemberElement_from (this, com.jbpm5v2.jbpm5v2_TypeInfo.binder.getMembers()[com.jbpm5v2.jbpm5v2_TypeInfo._altova_mi_altova_jbpm5v22._from]);
		inputSet= new MemberElement_inputSet (this, com.jbpm5v2.jbpm5v2_TypeInfo.binder.getMembers()[com.jbpm5v2.jbpm5v2_TypeInfo._altova_mi_altova_jbpm5v22._inputSet]);
		ioSpecification= new MemberElement_ioSpecification (this, com.jbpm5v2.jbpm5v2_TypeInfo.binder.getMembers()[com.jbpm5v2.jbpm5v2_TypeInfo._altova_mi_altova_jbpm5v22._ioSpecification]);
		outputSet= new MemberElement_outputSet (this, com.jbpm5v2.jbpm5v2_TypeInfo.binder.getMembers()[com.jbpm5v2.jbpm5v2_TypeInfo._altova_mi_altova_jbpm5v22._outputSet]);
		potentialOwner= new MemberElement_potentialOwner (this, com.jbpm5v2.jbpm5v2_TypeInfo.binder.getMembers()[com.jbpm5v2.jbpm5v2_TypeInfo._altova_mi_altova_jbpm5v22._potentialOwner]);
		process= new MemberElement_process (this, com.jbpm5v2.jbpm5v2_TypeInfo.binder.getMembers()[com.jbpm5v2.jbpm5v2_TypeInfo._altova_mi_altova_jbpm5v22._process]);
		resourceAssignmentExpression= new MemberElement_resourceAssignmentExpression (this, com.jbpm5v2.jbpm5v2_TypeInfo.binder.getMembers()[com.jbpm5v2.jbpm5v2_TypeInfo._altova_mi_altova_jbpm5v22._resourceAssignmentExpression]);
		sequenceFlow= new MemberElement_sequenceFlow (this, com.jbpm5v2.jbpm5v2_TypeInfo.binder.getMembers()[com.jbpm5v2.jbpm5v2_TypeInfo._altova_mi_altova_jbpm5v22._sequenceFlow]);
		sourceRef= new MemberElement_sourceRef (this, com.jbpm5v2.jbpm5v2_TypeInfo.binder.getMembers()[com.jbpm5v2.jbpm5v2_TypeInfo._altova_mi_altova_jbpm5v22._sourceRef]);
		startEvent= new MemberElement_startEvent (this, com.jbpm5v2.jbpm5v2_TypeInfo.binder.getMembers()[com.jbpm5v2.jbpm5v2_TypeInfo._altova_mi_altova_jbpm5v22._startEvent]);
		targetRef= new MemberElement_targetRef (this, com.jbpm5v2.jbpm5v2_TypeInfo.binder.getMembers()[com.jbpm5v2.jbpm5v2_TypeInfo._altova_mi_altova_jbpm5v22._targetRef]);
		to= new MemberElement_to (this, com.jbpm5v2.jbpm5v2_TypeInfo.binder.getMembers()[com.jbpm5v2.jbpm5v2_TypeInfo._altova_mi_altova_jbpm5v22._to]);
		userTask= new MemberElement_userTask (this, com.jbpm5v2.jbpm5v2_TypeInfo.binder.getMembers()[com.jbpm5v2.jbpm5v2_TypeInfo._altova_mi_altova_jbpm5v22._userTask]);
		Bounds= new MemberElement_Bounds (this, com.jbpm5v2.jbpm5v2_TypeInfo.binder.getMembers()[com.jbpm5v2.jbpm5v2_TypeInfo._altova_mi_altova_jbpm5v22._Bounds]);
		waypoint= new MemberElement_waypoint (this, com.jbpm5v2.jbpm5v2_TypeInfo.binder.getMembers()[com.jbpm5v2.jbpm5v2_TypeInfo._altova_mi_altova_jbpm5v22._waypoint]);
	}
	// Attributes


	// Elements
	
	public MemberElement_onEntry_script onEntry_script;

		public static class MemberElement_onEntry_script
		{
			public static class MemberElement_onEntry_script_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_onEntry_script member;
				public MemberElement_onEntry_script_Iterator(MemberElement_onEntry_script member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.migration.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					onEntry_scriptType nx = new onEntry_scriptType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.migration.xml.TypeBase owner;
			protected com.migration.typeinfo.MemberInfo info;
			public MemberElement_onEntry_script (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public onEntry_scriptType at(int index) {return new onEntry_scriptType(owner.getElementAt(info, index));}
			public onEntry_scriptType first() {return new onEntry_scriptType(owner.getElementFirst(info));}
			public onEntry_scriptType last(){return new onEntry_scriptType(owner.getElementLast(info));}
			public onEntry_scriptType append(){return new onEntry_scriptType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_onEntry_script_Iterator(this);}
			public com.migration.xml.meta.Element getInfo() { return new com.migration.xml.meta.Element(info); }
		}
	
	public MemberElement_onExit_script onExit_script;

		public static class MemberElement_onExit_script
		{
			public static class MemberElement_onExit_script_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_onExit_script member;
				public MemberElement_onExit_script_Iterator(MemberElement_onExit_script member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.migration.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					onExit_scriptType nx = new onExit_scriptType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.migration.xml.TypeBase owner;
			protected com.migration.typeinfo.MemberInfo info;
			public MemberElement_onExit_script (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public onExit_scriptType at(int index) {return new onExit_scriptType(owner.getElementAt(info, index));}
			public onExit_scriptType first() {return new onExit_scriptType(owner.getElementFirst(info));}
			public onExit_scriptType last(){return new onExit_scriptType(owner.getElementLast(info));}
			public onExit_scriptType append(){return new onExit_scriptType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_onExit_script_Iterator(this);}
			public com.migration.xml.meta.Element getInfo() { return new com.migration.xml.meta.Element(info); }
		}
	
	public MemberElement_script script;

		public static class MemberElement_script
		{
			public static class MemberElement_script_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_script member;
				public MemberElement_script_Iterator(MemberElement_script member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.migration.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					scriptType nx = new scriptType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.migration.xml.TypeBase owner;
			protected com.migration.typeinfo.MemberInfo info;
			public MemberElement_script (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public scriptType at(int index) {return new scriptType(owner.getElementAt(info, index));}
			public scriptType first() {return new scriptType(owner.getElementFirst(info));}
			public scriptType last(){return new scriptType(owner.getElementLast(info));}
			public scriptType append(){return new scriptType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_script_Iterator(this);}
			public com.migration.xml.meta.Element getInfo() { return new com.migration.xml.meta.Element(info); }
		}
	
	public MemberElement_BPMNDiagram BPMNDiagram;

		public static class MemberElement_BPMNDiagram
		{
			public static class MemberElement_BPMNDiagram_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_BPMNDiagram member;
				public MemberElement_BPMNDiagram_Iterator(MemberElement_BPMNDiagram member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.migration.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					BPMNDiagramType nx = new BPMNDiagramType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.migration.xml.TypeBase owner;
			protected com.migration.typeinfo.MemberInfo info;
			public MemberElement_BPMNDiagram (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public BPMNDiagramType at(int index) {return new BPMNDiagramType(owner.getElementAt(info, index));}
			public BPMNDiagramType first() {return new BPMNDiagramType(owner.getElementFirst(info));}
			public BPMNDiagramType last(){return new BPMNDiagramType(owner.getElementLast(info));}
			public BPMNDiagramType append(){return new BPMNDiagramType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_BPMNDiagram_Iterator(this);}
			public com.migration.xml.meta.Element getInfo() { return new com.migration.xml.meta.Element(info); }
		}
	
	public MemberElement_BPMNEdge BPMNEdge;

		public static class MemberElement_BPMNEdge
		{
			public static class MemberElement_BPMNEdge_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_BPMNEdge member;
				public MemberElement_BPMNEdge_Iterator(MemberElement_BPMNEdge member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.migration.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					BPMNEdgeType nx = new BPMNEdgeType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.migration.xml.TypeBase owner;
			protected com.migration.typeinfo.MemberInfo info;
			public MemberElement_BPMNEdge (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public BPMNEdgeType at(int index) {return new BPMNEdgeType(owner.getElementAt(info, index));}
			public BPMNEdgeType first() {return new BPMNEdgeType(owner.getElementFirst(info));}
			public BPMNEdgeType last(){return new BPMNEdgeType(owner.getElementLast(info));}
			public BPMNEdgeType append(){return new BPMNEdgeType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_BPMNEdge_Iterator(this);}
			public com.migration.xml.meta.Element getInfo() { return new com.migration.xml.meta.Element(info); }
		}
	
	public MemberElement_BPMNPlane BPMNPlane;

		public static class MemberElement_BPMNPlane
		{
			public static class MemberElement_BPMNPlane_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_BPMNPlane member;
				public MemberElement_BPMNPlane_Iterator(MemberElement_BPMNPlane member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.migration.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					BPMNPlaneType nx = new BPMNPlaneType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.migration.xml.TypeBase owner;
			protected com.migration.typeinfo.MemberInfo info;
			public MemberElement_BPMNPlane (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public BPMNPlaneType at(int index) {return new BPMNPlaneType(owner.getElementAt(info, index));}
			public BPMNPlaneType first() {return new BPMNPlaneType(owner.getElementFirst(info));}
			public BPMNPlaneType last(){return new BPMNPlaneType(owner.getElementLast(info));}
			public BPMNPlaneType append(){return new BPMNPlaneType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_BPMNPlane_Iterator(this);}
			public com.migration.xml.meta.Element getInfo() { return new com.migration.xml.meta.Element(info); }
		}
	
	public MemberElement_BPMNShape BPMNShape;

		public static class MemberElement_BPMNShape
		{
			public static class MemberElement_BPMNShape_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_BPMNShape member;
				public MemberElement_BPMNShape_Iterator(MemberElement_BPMNShape member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.migration.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					BPMNShapeType nx = new BPMNShapeType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.migration.xml.TypeBase owner;
			protected com.migration.typeinfo.MemberInfo info;
			public MemberElement_BPMNShape (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public BPMNShapeType at(int index) {return new BPMNShapeType(owner.getElementAt(info, index));}
			public BPMNShapeType first() {return new BPMNShapeType(owner.getElementFirst(info));}
			public BPMNShapeType last(){return new BPMNShapeType(owner.getElementLast(info));}
			public BPMNShapeType append(){return new BPMNShapeType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_BPMNShape_Iterator(this);}
			public com.migration.xml.meta.Element getInfo() { return new com.migration.xml.meta.Element(info); }
		}
	
	public MemberElement_assignment assignment;

		public static class MemberElement_assignment
		{
			public static class MemberElement_assignment_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_assignment member;
				public MemberElement_assignment_Iterator(MemberElement_assignment member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.migration.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					assignmentType nx = new assignmentType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.migration.xml.TypeBase owner;
			protected com.migration.typeinfo.MemberInfo info;
			public MemberElement_assignment (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public assignmentType at(int index) {return new assignmentType(owner.getElementAt(info, index));}
			public assignmentType first() {return new assignmentType(owner.getElementFirst(info));}
			public assignmentType last(){return new assignmentType(owner.getElementLast(info));}
			public assignmentType append(){return new assignmentType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_assignment_Iterator(this);}
			public com.migration.xml.meta.Element getInfo() { return new com.migration.xml.meta.Element(info); }
		}
	
	public MemberElement_conditionExpression conditionExpression;

		public static class MemberElement_conditionExpression
		{
			public static class MemberElement_conditionExpression_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_conditionExpression member;
				public MemberElement_conditionExpression_Iterator(MemberElement_conditionExpression member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.migration.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					conditionExpressionType nx = new conditionExpressionType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.migration.xml.TypeBase owner;
			protected com.migration.typeinfo.MemberInfo info;
			public MemberElement_conditionExpression (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public conditionExpressionType at(int index) {return new conditionExpressionType(owner.getElementAt(info, index));}
			public conditionExpressionType first() {return new conditionExpressionType(owner.getElementFirst(info));}
			public conditionExpressionType last(){return new conditionExpressionType(owner.getElementLast(info));}
			public conditionExpressionType append(){return new conditionExpressionType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_conditionExpression_Iterator(this);}
			public com.migration.xml.meta.Element getInfo() { return new com.migration.xml.meta.Element(info); }
		}
	
	public MemberElement_dataInput dataInput;

		public static class MemberElement_dataInput
		{
			public static class MemberElement_dataInput_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_dataInput member;
				public MemberElement_dataInput_Iterator(MemberElement_dataInput member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.migration.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					dataInputType nx = new dataInputType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.migration.xml.TypeBase owner;
			protected com.migration.typeinfo.MemberInfo info;
			public MemberElement_dataInput (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public dataInputType at(int index) {return new dataInputType(owner.getElementAt(info, index));}
			public dataInputType first() {return new dataInputType(owner.getElementFirst(info));}
			public dataInputType last(){return new dataInputType(owner.getElementLast(info));}
			public dataInputType append(){return new dataInputType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_dataInput_Iterator(this);}
			public com.migration.xml.meta.Element getInfo() { return new com.migration.xml.meta.Element(info); }
		}
	
	public MemberElement_dataInputAssociation dataInputAssociation;

		public static class MemberElement_dataInputAssociation
		{
			public static class MemberElement_dataInputAssociation_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_dataInputAssociation member;
				public MemberElement_dataInputAssociation_Iterator(MemberElement_dataInputAssociation member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.migration.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					dataInputAssociationType nx = new dataInputAssociationType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.migration.xml.TypeBase owner;
			protected com.migration.typeinfo.MemberInfo info;
			public MemberElement_dataInputAssociation (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public dataInputAssociationType at(int index) {return new dataInputAssociationType(owner.getElementAt(info, index));}
			public dataInputAssociationType first() {return new dataInputAssociationType(owner.getElementFirst(info));}
			public dataInputAssociationType last(){return new dataInputAssociationType(owner.getElementLast(info));}
			public dataInputAssociationType append(){return new dataInputAssociationType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_dataInputAssociation_Iterator(this);}
			public com.migration.xml.meta.Element getInfo() { return new com.migration.xml.meta.Element(info); }
		}
	
	public MemberElement_dataInputRefs dataInputRefs;

		public static class MemberElement_dataInputRefs
		{
			public static class MemberElement_dataInputRefs_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_dataInputRefs member;
				public MemberElement_dataInputRefs_Iterator(MemberElement_dataInputRefs member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.migration.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					dataInputRefsType nx = new dataInputRefsType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.migration.xml.TypeBase owner;
			protected com.migration.typeinfo.MemberInfo info;
			public MemberElement_dataInputRefs (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public dataInputRefsType at(int index) {return new dataInputRefsType(owner.getElementAt(info, index));}
			public dataInputRefsType first() {return new dataInputRefsType(owner.getElementFirst(info));}
			public dataInputRefsType last(){return new dataInputRefsType(owner.getElementLast(info));}
			public dataInputRefsType append(){return new dataInputRefsType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_dataInputRefs_Iterator(this);}
			public com.migration.xml.meta.Element getInfo() { return new com.migration.xml.meta.Element(info); }
		}
	
	public MemberElement_dataOutput dataOutput;

		public static class MemberElement_dataOutput
		{
			public static class MemberElement_dataOutput_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_dataOutput member;
				public MemberElement_dataOutput_Iterator(MemberElement_dataOutput member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.migration.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					dataOutputType nx = new dataOutputType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.migration.xml.TypeBase owner;
			protected com.migration.typeinfo.MemberInfo info;
			public MemberElement_dataOutput (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public dataOutputType at(int index) {return new dataOutputType(owner.getElementAt(info, index));}
			public dataOutputType first() {return new dataOutputType(owner.getElementFirst(info));}
			public dataOutputType last(){return new dataOutputType(owner.getElementLast(info));}
			public dataOutputType append(){return new dataOutputType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_dataOutput_Iterator(this);}
			public com.migration.xml.meta.Element getInfo() { return new com.migration.xml.meta.Element(info); }
		}
	
	public MemberElement_dataOutputAssociation dataOutputAssociation;

		public static class MemberElement_dataOutputAssociation
		{
			public static class MemberElement_dataOutputAssociation_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_dataOutputAssociation member;
				public MemberElement_dataOutputAssociation_Iterator(MemberElement_dataOutputAssociation member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.migration.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					dataOutputAssociationType nx = new dataOutputAssociationType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.migration.xml.TypeBase owner;
			protected com.migration.typeinfo.MemberInfo info;
			public MemberElement_dataOutputAssociation (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public dataOutputAssociationType at(int index) {return new dataOutputAssociationType(owner.getElementAt(info, index));}
			public dataOutputAssociationType first() {return new dataOutputAssociationType(owner.getElementFirst(info));}
			public dataOutputAssociationType last(){return new dataOutputAssociationType(owner.getElementLast(info));}
			public dataOutputAssociationType append(){return new dataOutputAssociationType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_dataOutputAssociation_Iterator(this);}
			public com.migration.xml.meta.Element getInfo() { return new com.migration.xml.meta.Element(info); }
		}
	
	public MemberElement_dataOutputRefs dataOutputRefs;

		public static class MemberElement_dataOutputRefs
		{
			public static class MemberElement_dataOutputRefs_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_dataOutputRefs member;
				public MemberElement_dataOutputRefs_Iterator(MemberElement_dataOutputRefs member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.migration.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					dataOutputRefsType nx = new dataOutputRefsType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.migration.xml.TypeBase owner;
			protected com.migration.typeinfo.MemberInfo info;
			public MemberElement_dataOutputRefs (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public dataOutputRefsType at(int index) {return new dataOutputRefsType(owner.getElementAt(info, index));}
			public dataOutputRefsType first() {return new dataOutputRefsType(owner.getElementFirst(info));}
			public dataOutputRefsType last(){return new dataOutputRefsType(owner.getElementLast(info));}
			public dataOutputRefsType append(){return new dataOutputRefsType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_dataOutputRefs_Iterator(this);}
			public com.migration.xml.meta.Element getInfo() { return new com.migration.xml.meta.Element(info); }
		}
	
	public MemberElement_definitions definitions;

		public static class MemberElement_definitions
		{
			public static class MemberElement_definitions_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_definitions member;
				public MemberElement_definitions_Iterator(MemberElement_definitions member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.migration.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					definitionsType nx = new definitionsType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.migration.xml.TypeBase owner;
			protected com.migration.typeinfo.MemberInfo info;
			public MemberElement_definitions (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public definitionsType at(int index) {return new definitionsType(owner.getElementAt(info, index));}
			public definitionsType first() {return new definitionsType(owner.getElementFirst(info));}
			public definitionsType last(){return new definitionsType(owner.getElementLast(info));}
			public definitionsType append(){return new definitionsType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_definitions_Iterator(this);}
			public com.migration.xml.meta.Element getInfo() { return new com.migration.xml.meta.Element(info); }
		}
	
	public MemberElement_endEvent endEvent;

		public static class MemberElement_endEvent
		{
			public static class MemberElement_endEvent_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_endEvent member;
				public MemberElement_endEvent_Iterator(MemberElement_endEvent member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.migration.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					endEventType nx = new endEventType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.migration.xml.TypeBase owner;
			protected com.migration.typeinfo.MemberInfo info;
			public MemberElement_endEvent (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public endEventType at(int index) {return new endEventType(owner.getElementAt(info, index));}
			public endEventType first() {return new endEventType(owner.getElementFirst(info));}
			public endEventType last(){return new endEventType(owner.getElementLast(info));}
			public endEventType append(){return new endEventType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_endEvent_Iterator(this);}
			public com.migration.xml.meta.Element getInfo() { return new com.migration.xml.meta.Element(info); }
		}
	
	public MemberElement_exclusiveGateway exclusiveGateway;

		public static class MemberElement_exclusiveGateway
		{
			public static class MemberElement_exclusiveGateway_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_exclusiveGateway member;
				public MemberElement_exclusiveGateway_Iterator(MemberElement_exclusiveGateway member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.migration.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					exclusiveGatewayType nx = new exclusiveGatewayType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.migration.xml.TypeBase owner;
			protected com.migration.typeinfo.MemberInfo info;
			public MemberElement_exclusiveGateway (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public exclusiveGatewayType at(int index) {return new exclusiveGatewayType(owner.getElementAt(info, index));}
			public exclusiveGatewayType first() {return new exclusiveGatewayType(owner.getElementFirst(info));}
			public exclusiveGatewayType last(){return new exclusiveGatewayType(owner.getElementLast(info));}
			public exclusiveGatewayType append(){return new exclusiveGatewayType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_exclusiveGateway_Iterator(this);}
			public com.migration.xml.meta.Element getInfo() { return new com.migration.xml.meta.Element(info); }
		}
	
	public MemberElement_extensionElements extensionElements;

		public static class MemberElement_extensionElements
		{
			public static class MemberElement_extensionElements_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_extensionElements member;
				public MemberElement_extensionElements_Iterator(MemberElement_extensionElements member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.migration.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					extensionElementsType nx = new extensionElementsType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.migration.xml.TypeBase owner;
			protected com.migration.typeinfo.MemberInfo info;
			public MemberElement_extensionElements (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public extensionElementsType at(int index) {return new extensionElementsType(owner.getElementAt(info, index));}
			public extensionElementsType first() {return new extensionElementsType(owner.getElementFirst(info));}
			public extensionElementsType last(){return new extensionElementsType(owner.getElementLast(info));}
			public extensionElementsType append(){return new extensionElementsType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_extensionElements_Iterator(this);}
			public com.migration.xml.meta.Element getInfo() { return new com.migration.xml.meta.Element(info); }
		}
	
	public MemberElement_formalExpression formalExpression;

		public static class MemberElement_formalExpression
		{
			public static class MemberElement_formalExpression_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_formalExpression member;
				public MemberElement_formalExpression_Iterator(MemberElement_formalExpression member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.migration.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					formalExpressionType nx = new formalExpressionType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.migration.xml.TypeBase owner;
			protected com.migration.typeinfo.MemberInfo info;
			public MemberElement_formalExpression (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public formalExpressionType at(int index) {return new formalExpressionType(owner.getElementAt(info, index));}
			public formalExpressionType first() {return new formalExpressionType(owner.getElementFirst(info));}
			public formalExpressionType last(){return new formalExpressionType(owner.getElementLast(info));}
			public formalExpressionType append(){return new formalExpressionType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_formalExpression_Iterator(this);}
			public com.migration.xml.meta.Element getInfo() { return new com.migration.xml.meta.Element(info); }
		}
	
	public MemberElement_from from;

		public static class MemberElement_from
		{
			public static class MemberElement_from_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_from member;
				public MemberElement_from_Iterator(MemberElement_from member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.migration.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					com.jbpm5v2.xs.stringType nx = new com.jbpm5v2.xs.stringType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.migration.xml.TypeBase owner;
			protected com.migration.typeinfo.MemberInfo info;
			public MemberElement_from (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public com.jbpm5v2.xs.stringType at(int index) {return new com.jbpm5v2.xs.stringType(owner.getElementAt(info, index));}
			public com.jbpm5v2.xs.stringType first() {return new com.jbpm5v2.xs.stringType(owner.getElementFirst(info));}
			public com.jbpm5v2.xs.stringType last(){return new com.jbpm5v2.xs.stringType(owner.getElementLast(info));}
			public com.jbpm5v2.xs.stringType append(){return new com.jbpm5v2.xs.stringType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_from_Iterator(this);}
			public com.migration.xml.meta.Element getInfo() { return new com.migration.xml.meta.Element(info); }
		}
	
	public MemberElement_inputSet inputSet;

		public static class MemberElement_inputSet
		{
			public static class MemberElement_inputSet_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_inputSet member;
				public MemberElement_inputSet_Iterator(MemberElement_inputSet member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.migration.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					inputSetType nx = new inputSetType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.migration.xml.TypeBase owner;
			protected com.migration.typeinfo.MemberInfo info;
			public MemberElement_inputSet (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public inputSetType at(int index) {return new inputSetType(owner.getElementAt(info, index));}
			public inputSetType first() {return new inputSetType(owner.getElementFirst(info));}
			public inputSetType last(){return new inputSetType(owner.getElementLast(info));}
			public inputSetType append(){return new inputSetType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_inputSet_Iterator(this);}
			public com.migration.xml.meta.Element getInfo() { return new com.migration.xml.meta.Element(info); }
		}
	
	public MemberElement_ioSpecification ioSpecification;

		public static class MemberElement_ioSpecification
		{
			public static class MemberElement_ioSpecification_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_ioSpecification member;
				public MemberElement_ioSpecification_Iterator(MemberElement_ioSpecification member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.migration.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					ioSpecificationType nx = new ioSpecificationType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.migration.xml.TypeBase owner;
			protected com.migration.typeinfo.MemberInfo info;
			public MemberElement_ioSpecification (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public ioSpecificationType at(int index) {return new ioSpecificationType(owner.getElementAt(info, index));}
			public ioSpecificationType first() {return new ioSpecificationType(owner.getElementFirst(info));}
			public ioSpecificationType last(){return new ioSpecificationType(owner.getElementLast(info));}
			public ioSpecificationType append(){return new ioSpecificationType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_ioSpecification_Iterator(this);}
			public com.migration.xml.meta.Element getInfo() { return new com.migration.xml.meta.Element(info); }
		}
	
	public MemberElement_outputSet outputSet;

		public static class MemberElement_outputSet
		{
			public static class MemberElement_outputSet_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_outputSet member;
				public MemberElement_outputSet_Iterator(MemberElement_outputSet member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.migration.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					outputSetType nx = new outputSetType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.migration.xml.TypeBase owner;
			protected com.migration.typeinfo.MemberInfo info;
			public MemberElement_outputSet (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public outputSetType at(int index) {return new outputSetType(owner.getElementAt(info, index));}
			public outputSetType first() {return new outputSetType(owner.getElementFirst(info));}
			public outputSetType last(){return new outputSetType(owner.getElementLast(info));}
			public outputSetType append(){return new outputSetType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_outputSet_Iterator(this);}
			public com.migration.xml.meta.Element getInfo() { return new com.migration.xml.meta.Element(info); }
		}
	
	public MemberElement_potentialOwner potentialOwner;

		public static class MemberElement_potentialOwner
		{
			public static class MemberElement_potentialOwner_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_potentialOwner member;
				public MemberElement_potentialOwner_Iterator(MemberElement_potentialOwner member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.migration.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					potentialOwnerType nx = new potentialOwnerType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.migration.xml.TypeBase owner;
			protected com.migration.typeinfo.MemberInfo info;
			public MemberElement_potentialOwner (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public potentialOwnerType at(int index) {return new potentialOwnerType(owner.getElementAt(info, index));}
			public potentialOwnerType first() {return new potentialOwnerType(owner.getElementFirst(info));}
			public potentialOwnerType last(){return new potentialOwnerType(owner.getElementLast(info));}
			public potentialOwnerType append(){return new potentialOwnerType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_potentialOwner_Iterator(this);}
			public com.migration.xml.meta.Element getInfo() { return new com.migration.xml.meta.Element(info); }
		}
	
	public MemberElement_process process;

		public static class MemberElement_process
		{
			public static class MemberElement_process_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_process member;
				public MemberElement_process_Iterator(MemberElement_process member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.migration.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					processType nx = new processType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.migration.xml.TypeBase owner;
			protected com.migration.typeinfo.MemberInfo info;
			public MemberElement_process (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public processType at(int index) {return new processType(owner.getElementAt(info, index));}
			public processType first() {return new processType(owner.getElementFirst(info));}
			public processType last(){return new processType(owner.getElementLast(info));}
			public processType append(){return new processType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_process_Iterator(this);}
			public com.migration.xml.meta.Element getInfo() { return new com.migration.xml.meta.Element(info); }
		}
	
	public MemberElement_resourceAssignmentExpression resourceAssignmentExpression;

		public static class MemberElement_resourceAssignmentExpression
		{
			public static class MemberElement_resourceAssignmentExpression_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_resourceAssignmentExpression member;
				public MemberElement_resourceAssignmentExpression_Iterator(MemberElement_resourceAssignmentExpression member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.migration.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					resourceAssignmentExpressionType nx = new resourceAssignmentExpressionType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.migration.xml.TypeBase owner;
			protected com.migration.typeinfo.MemberInfo info;
			public MemberElement_resourceAssignmentExpression (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public resourceAssignmentExpressionType at(int index) {return new resourceAssignmentExpressionType(owner.getElementAt(info, index));}
			public resourceAssignmentExpressionType first() {return new resourceAssignmentExpressionType(owner.getElementFirst(info));}
			public resourceAssignmentExpressionType last(){return new resourceAssignmentExpressionType(owner.getElementLast(info));}
			public resourceAssignmentExpressionType append(){return new resourceAssignmentExpressionType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_resourceAssignmentExpression_Iterator(this);}
			public com.migration.xml.meta.Element getInfo() { return new com.migration.xml.meta.Element(info); }
		}
	
	public MemberElement_sequenceFlow sequenceFlow;

		public static class MemberElement_sequenceFlow
		{
			public static class MemberElement_sequenceFlow_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_sequenceFlow member;
				public MemberElement_sequenceFlow_Iterator(MemberElement_sequenceFlow member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.migration.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					sequenceFlowType nx = new sequenceFlowType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.migration.xml.TypeBase owner;
			protected com.migration.typeinfo.MemberInfo info;
			public MemberElement_sequenceFlow (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public sequenceFlowType at(int index) {return new sequenceFlowType(owner.getElementAt(info, index));}
			public sequenceFlowType first() {return new sequenceFlowType(owner.getElementFirst(info));}
			public sequenceFlowType last(){return new sequenceFlowType(owner.getElementLast(info));}
			public sequenceFlowType append(){return new sequenceFlowType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_sequenceFlow_Iterator(this);}
			public com.migration.xml.meta.Element getInfo() { return new com.migration.xml.meta.Element(info); }
		}
	
	public MemberElement_sourceRef sourceRef;

		public static class MemberElement_sourceRef
		{
			public static class MemberElement_sourceRef_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_sourceRef member;
				public MemberElement_sourceRef_Iterator(MemberElement_sourceRef member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.migration.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					sourceRefType nx = new sourceRefType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.migration.xml.TypeBase owner;
			protected com.migration.typeinfo.MemberInfo info;
			public MemberElement_sourceRef (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public sourceRefType at(int index) {return new sourceRefType(owner.getElementAt(info, index));}
			public sourceRefType first() {return new sourceRefType(owner.getElementFirst(info));}
			public sourceRefType last(){return new sourceRefType(owner.getElementLast(info));}
			public sourceRefType append(){return new sourceRefType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_sourceRef_Iterator(this);}
			public com.migration.xml.meta.Element getInfo() { return new com.migration.xml.meta.Element(info); }
		}
	
	public MemberElement_startEvent startEvent;

		public static class MemberElement_startEvent
		{
			public static class MemberElement_startEvent_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_startEvent member;
				public MemberElement_startEvent_Iterator(MemberElement_startEvent member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.migration.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					startEventType nx = new startEventType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.migration.xml.TypeBase owner;
			protected com.migration.typeinfo.MemberInfo info;
			public MemberElement_startEvent (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public startEventType at(int index) {return new startEventType(owner.getElementAt(info, index));}
			public startEventType first() {return new startEventType(owner.getElementFirst(info));}
			public startEventType last(){return new startEventType(owner.getElementLast(info));}
			public startEventType append(){return new startEventType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_startEvent_Iterator(this);}
			public com.migration.xml.meta.Element getInfo() { return new com.migration.xml.meta.Element(info); }
		}
	
	public MemberElement_targetRef targetRef;

		public static class MemberElement_targetRef
		{
			public static class MemberElement_targetRef_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_targetRef member;
				public MemberElement_targetRef_Iterator(MemberElement_targetRef member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.migration.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					targetRefType nx = new targetRefType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.migration.xml.TypeBase owner;
			protected com.migration.typeinfo.MemberInfo info;
			public MemberElement_targetRef (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public targetRefType at(int index) {return new targetRefType(owner.getElementAt(info, index));}
			public targetRefType first() {return new targetRefType(owner.getElementFirst(info));}
			public targetRefType last(){return new targetRefType(owner.getElementLast(info));}
			public targetRefType append(){return new targetRefType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_targetRef_Iterator(this);}
			public com.migration.xml.meta.Element getInfo() { return new com.migration.xml.meta.Element(info); }
		}
	
	public MemberElement_to to;

		public static class MemberElement_to
		{
			public static class MemberElement_to_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_to member;
				public MemberElement_to_Iterator(MemberElement_to member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.migration.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					com.jbpm5v2.xs.stringType nx = new com.jbpm5v2.xs.stringType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.migration.xml.TypeBase owner;
			protected com.migration.typeinfo.MemberInfo info;
			public MemberElement_to (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public com.jbpm5v2.xs.stringType at(int index) {return new com.jbpm5v2.xs.stringType(owner.getElementAt(info, index));}
			public com.jbpm5v2.xs.stringType first() {return new com.jbpm5v2.xs.stringType(owner.getElementFirst(info));}
			public com.jbpm5v2.xs.stringType last(){return new com.jbpm5v2.xs.stringType(owner.getElementLast(info));}
			public com.jbpm5v2.xs.stringType append(){return new com.jbpm5v2.xs.stringType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_to_Iterator(this);}
			public com.migration.xml.meta.Element getInfo() { return new com.migration.xml.meta.Element(info); }
		}
	
	public MemberElement_userTask userTask;

		public static class MemberElement_userTask
		{
			public static class MemberElement_userTask_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_userTask member;
				public MemberElement_userTask_Iterator(MemberElement_userTask member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.migration.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					userTaskType nx = new userTaskType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.migration.xml.TypeBase owner;
			protected com.migration.typeinfo.MemberInfo info;
			public MemberElement_userTask (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public userTaskType at(int index) {return new userTaskType(owner.getElementAt(info, index));}
			public userTaskType first() {return new userTaskType(owner.getElementFirst(info));}
			public userTaskType last(){return new userTaskType(owner.getElementLast(info));}
			public userTaskType append(){return new userTaskType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_userTask_Iterator(this);}
			public com.migration.xml.meta.Element getInfo() { return new com.migration.xml.meta.Element(info); }
		}
	
	public MemberElement_Bounds Bounds;

		public static class MemberElement_Bounds
		{
			public static class MemberElement_Bounds_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_Bounds member;
				public MemberElement_Bounds_Iterator(MemberElement_Bounds member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.migration.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					BoundsType nx = new BoundsType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.migration.xml.TypeBase owner;
			protected com.migration.typeinfo.MemberInfo info;
			public MemberElement_Bounds (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public BoundsType at(int index) {return new BoundsType(owner.getElementAt(info, index));}
			public BoundsType first() {return new BoundsType(owner.getElementFirst(info));}
			public BoundsType last(){return new BoundsType(owner.getElementLast(info));}
			public BoundsType append(){return new BoundsType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_Bounds_Iterator(this);}
			public com.migration.xml.meta.Element getInfo() { return new com.migration.xml.meta.Element(info); }
		}
	
	public MemberElement_waypoint waypoint;

		public static class MemberElement_waypoint
		{
			public static class MemberElement_waypoint_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_waypoint member;
				public MemberElement_waypoint_Iterator(MemberElement_waypoint member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.migration.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					waypointType nx = new waypointType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.migration.xml.TypeBase owner;
			protected com.migration.typeinfo.MemberInfo info;
			public MemberElement_waypoint (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public waypointType at(int index) {return new waypointType(owner.getElementAt(info, index));}
			public waypointType first() {return new waypointType(owner.getElementFirst(info));}
			public waypointType last(){return new waypointType(owner.getElementLast(info));}
			public waypointType append(){return new waypointType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_waypoint_Iterator(this);}
			public com.migration.xml.meta.Element getInfo() { return new com.migration.xml.meta.Element(info); }
		}

		public void setXsiType() {com.migration.xml.XmlTreeOperations.setAttribute(getNode(), "http://www.w3.org/2001/XMLSchema-instance", "xsi:type", "http://www.omg.org/spec/BPMN/20100524/MODEL", "jbpm5v2");}
}
