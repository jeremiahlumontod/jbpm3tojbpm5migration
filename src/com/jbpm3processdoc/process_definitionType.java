////////////////////////////////////////////////////////////////////////
//
// process_definitionType.java
//
// This file was generated by XMLSpy 2009sp1 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//
////////////////////////////////////////////////////////////////////////

package com.jbpm3processdoc;


public class process_definitionType extends com.migration.xml.TypeBase
{
		public static com.migration.xml.meta.ComplexType getStaticInfo() { return new com.migration.xml.meta.ComplexType(com.jbpm3processdoc.jbpm3processdoc_TypeInfo.binder.getTypes()[com.jbpm3processdoc.jbpm3processdoc_TypeInfo._altova_ti_altova_process_definitionType]); }
	
	public process_definitionType(org.w3c.dom.Node init)
	{
		super(init);
		instantiateMembers();
	}
	
	private void instantiateMembers()
	{
		name = new MemberAttribute_name (this, com.jbpm3processdoc.jbpm3processdoc_TypeInfo.binder.getMembers()[com.jbpm3processdoc.jbpm3processdoc_TypeInfo._altova_mi_altova_process_definitionType._name]);

		start_state= new MemberElement_start_state (this, com.jbpm3processdoc.jbpm3processdoc_TypeInfo.binder.getMembers()[com.jbpm3processdoc.jbpm3processdoc_TypeInfo._altova_mi_altova_process_definitionType._start_state]);
		task_node= new MemberElement_task_node (this, com.jbpm3processdoc.jbpm3processdoc_TypeInfo.binder.getMembers()[com.jbpm3processdoc.jbpm3processdoc_TypeInfo._altova_mi_altova_process_definitionType._task_node]);
		decision= new MemberElement_decision (this, com.jbpm3processdoc.jbpm3processdoc_TypeInfo.binder.getMembers()[com.jbpm3processdoc.jbpm3processdoc_TypeInfo._altova_mi_altova_process_definitionType._decision]);
		end_state= new MemberElement_end_state (this, com.jbpm3processdoc.jbpm3processdoc_TypeInfo.binder.getMembers()[com.jbpm3processdoc.jbpm3processdoc_TypeInfo._altova_mi_altova_process_definitionType._end_state]);
	}
	// Attributes
	public MemberAttribute_name name;
		public static class MemberAttribute_name
		{
			private com.migration.xml.TypeBase owner;
			private com.migration.typeinfo.MemberInfo info; 
			public MemberAttribute_name (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) {this.owner = owner; this.info = info;}
			public String getValue() {
				return (String)com.migration.xml.XmlTreeOperations.castToString(com.migration.xml.XmlTreeOperations.findAttribute(owner.getNode(), info), info);
			}
			public void setValue(String value) {
				com.migration.xml.XmlTreeOperations.setValue(owner.getNode(), info, value);		
			}
			public boolean exists() {return owner.getAttribute(info) != null;}
			public void remove() {owner.removeAttribute(info);} 
			public com.migration.xml.meta.Attribute getInfo() {return new com.migration.xml.meta.Attribute(info);}
		}


	// Elements
	
	public MemberElement_start_state start_state;

		public static class MemberElement_start_state
		{
			public static class MemberElement_start_state_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_start_state member;
				public MemberElement_start_state_Iterator(MemberElement_start_state member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.migration.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					start_stateType nx = new start_stateType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.migration.xml.TypeBase owner;
			protected com.migration.typeinfo.MemberInfo info;
			public MemberElement_start_state (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public start_stateType at(int index) {return new start_stateType(owner.getElementAt(info, index));}
			public start_stateType first() {return new start_stateType(owner.getElementFirst(info));}
			public start_stateType last(){return new start_stateType(owner.getElementLast(info));}
			public start_stateType append(){return new start_stateType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_start_state_Iterator(this);}
			public com.migration.xml.meta.Element getInfo() { return new com.migration.xml.meta.Element(info); }
		}
	
	public MemberElement_task_node task_node;

		public static class MemberElement_task_node
		{
			public static class MemberElement_task_node_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_task_node member;
				public MemberElement_task_node_Iterator(MemberElement_task_node member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.migration.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					task_nodeType nx = new task_nodeType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.migration.xml.TypeBase owner;
			protected com.migration.typeinfo.MemberInfo info;
			public MemberElement_task_node (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public task_nodeType at(int index) {return new task_nodeType(owner.getElementAt(info, index));}
			public task_nodeType first() {return new task_nodeType(owner.getElementFirst(info));}
			public task_nodeType last(){return new task_nodeType(owner.getElementLast(info));}
			public task_nodeType append(){return new task_nodeType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_task_node_Iterator(this);}
			public com.migration.xml.meta.Element getInfo() { return new com.migration.xml.meta.Element(info); }
		}
	
	public MemberElement_decision decision;

		public static class MemberElement_decision
		{
			public static class MemberElement_decision_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_decision member;
				public MemberElement_decision_Iterator(MemberElement_decision member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.migration.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					decisionType nx = new decisionType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.migration.xml.TypeBase owner;
			protected com.migration.typeinfo.MemberInfo info;
			public MemberElement_decision (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public decisionType at(int index) {return new decisionType(owner.getElementAt(info, index));}
			public decisionType first() {return new decisionType(owner.getElementFirst(info));}
			public decisionType last(){return new decisionType(owner.getElementLast(info));}
			public decisionType append(){return new decisionType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_decision_Iterator(this);}
			public com.migration.xml.meta.Element getInfo() { return new com.migration.xml.meta.Element(info); }
		}
	
	public MemberElement_end_state end_state;

		public static class MemberElement_end_state
		{
			public static class MemberElement_end_state_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_end_state member;
				public MemberElement_end_state_Iterator(MemberElement_end_state member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.migration.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					end_stateType nx = new end_stateType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.migration.xml.TypeBase owner;
			protected com.migration.typeinfo.MemberInfo info;
			public MemberElement_end_state (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public end_stateType at(int index) {return new end_stateType(owner.getElementAt(info, index));}
			public end_stateType first() {return new end_stateType(owner.getElementFirst(info));}
			public end_stateType last(){return new end_stateType(owner.getElementLast(info));}
			public end_stateType append(){return new end_stateType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_end_state_Iterator(this);}
			public com.migration.xml.meta.Element getInfo() { return new com.migration.xml.meta.Element(info); }
		}
}
