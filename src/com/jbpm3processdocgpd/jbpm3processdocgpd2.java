////////////////////////////////////////////////////////////////////////
//
// jbpm3processdocgpd2.java
//
// This file was generated by XMLSpy 2009sp1 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//
////////////////////////////////////////////////////////////////////////

package com.jbpm3processdocgpd;


public class jbpm3processdocgpd2 extends com.migration.xml.TypeBase
{
		public static com.migration.xml.meta.ComplexType getStaticInfo() { return new com.migration.xml.meta.ComplexType(com.jbpm3processdocgpd.jbpm3processdocgpd_TypeInfo.binder.getTypes()[com.jbpm3processdocgpd.jbpm3processdocgpd_TypeInfo._altova_ti_altova_jbpm3processdocgpd2]); }

	public static jbpm3processdocgpd2 loadFromFile(String filename) throws Exception
	{
		return new jbpm3processdocgpd2(com.migration.xml.XmlTreeOperations.loadDocument(filename));			
	}

	public static jbpm3processdocgpd2 loadFromString(String xmlstring) throws Exception
	{
		return new jbpm3processdocgpd2(com.migration.xml.XmlTreeOperations.loadXml(xmlstring));			
	}

	public static jbpm3processdocgpd2 loadFromBinary(byte[] binary) throws Exception
	{
		return new jbpm3processdocgpd2(com.migration.xml.XmlTreeOperations.loadXmlBinary(binary));
	}

	public void saveToFile(String filename, boolean prettyPrint) throws Exception
	{
		saveToFile(filename, prettyPrint, "UTF-8", false, false);
	}
	
	public void saveToFile(String filename, boolean prettyPrint, String encoding) throws Exception
	{
		saveToFile( filename, prettyPrint, encoding, encoding.compareToIgnoreCase("UTF-16BE") == 0, encoding.compareToIgnoreCase("UTF-16") == 0 );
	}

	public void saveToFile(String filename, boolean prettyPrint, String encoding, boolean bBigEndian, boolean bBOM) throws Exception
	{
		org.w3c.dom.Document doc = (org.w3c.dom.Document) getNode();
		com.migration.xml.XmlTreeOperations.saveDocument(doc, filename, encoding, bBigEndian, bBOM, prettyPrint);
	}

	public String saveToString(boolean prettyPrint) throws Exception
	{
		org.w3c.dom.Document doc = (org.w3c.dom.Document) getNode();
		return com.migration.xml.XmlTreeOperations.saveXml(doc, prettyPrint);
	}

	public byte[] saveToBinary(boolean prettyPrint) throws Exception
	{
		return saveToBinary(prettyPrint, "UTF-8", false, false);
	}
	
	public byte[] saveToBinary(boolean prettyPrint, String encoding) throws Exception
	{
		return saveToBinary( prettyPrint, encoding, encoding.compareToIgnoreCase("UTF-16BE") == 0, encoding.compareToIgnoreCase("UTF-16") == 0 );
	}

	public byte[] saveToBinary(boolean prettyPrint, String encoding, boolean bBigEndian, boolean bBOM) throws Exception
	{
		org.w3c.dom.Document doc = (org.w3c.dom.Document) getNode();
		return com.migration.xml.XmlTreeOperations.saveXmlBinary(doc, encoding, bBigEndian, bBOM, prettyPrint);
	}

	public static jbpm3processdocgpd2 createDocument() throws Exception
	{
		org.w3c.dom.Document doc = com.migration.xml.XmlTreeOperations.createDocument();
		return new jbpm3processdocgpd2(doc);
	}

	public void setSchemaLocation(String schemaLocation) throws Exception
	{
		org.w3c.dom.Document doc = (org.w3c.dom.Document) node;
		if (doc.getDocumentElement() == null)
			throw new Exception("SetSchemaLocation requires a root element.");
		String namespaceuri = doc.getDocumentElement().getNamespaceURI();
		if (namespaceuri == null || namespaceuri.length() == 0)
			doc.getDocumentElement().setAttributeNS("http://www.w3.org/2001/XMLSchema-instance", "noNamespaceSchemaLocation", schemaLocation);
		else
			doc.getDocumentElement().setAttributeNS("http://www.w3.org/2001/XMLSchema-instance", "schemaLocation", namespaceuri + " " + schemaLocation);
	}

	
	public jbpm3processdocgpd2(org.w3c.dom.Node init)
	{
		super(init);
		instantiateMembers();
	}
	
	private void instantiateMembers()
	{

		bendpoint= new MemberElement_bendpoint (this, com.jbpm3processdocgpd.jbpm3processdocgpd_TypeInfo.binder.getMembers()[com.jbpm3processdocgpd.jbpm3processdocgpd_TypeInfo._altova_mi_altova_jbpm3processdocgpd2._bendpoint]);
		edge= new MemberElement_edge (this, com.jbpm3processdocgpd.jbpm3processdocgpd_TypeInfo.binder.getMembers()[com.jbpm3processdocgpd.jbpm3processdocgpd_TypeInfo._altova_mi_altova_jbpm3processdocgpd2._edge]);
		label= new MemberElement_label (this, com.jbpm3processdocgpd.jbpm3processdocgpd_TypeInfo.binder.getMembers()[com.jbpm3processdocgpd.jbpm3processdocgpd_TypeInfo._altova_mi_altova_jbpm3processdocgpd2._label]);
		node2= new MemberElement_node2 (this, com.jbpm3processdocgpd.jbpm3processdocgpd_TypeInfo.binder.getMembers()[com.jbpm3processdocgpd.jbpm3processdocgpd_TypeInfo._altova_mi_altova_jbpm3processdocgpd2._node2]);
		root_container= new MemberElement_root_container (this, com.jbpm3processdocgpd.jbpm3processdocgpd_TypeInfo.binder.getMembers()[com.jbpm3processdocgpd.jbpm3processdocgpd_TypeInfo._altova_mi_altova_jbpm3processdocgpd2._root_container]);
	}
	// Attributes


	// Elements
	
	public MemberElement_bendpoint bendpoint;

		public static class MemberElement_bendpoint
		{
			public static class MemberElement_bendpoint_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_bendpoint member;
				public MemberElement_bendpoint_Iterator(MemberElement_bendpoint member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.migration.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					bendpointType nx = new bendpointType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.migration.xml.TypeBase owner;
			protected com.migration.typeinfo.MemberInfo info;
			public MemberElement_bendpoint (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public bendpointType at(int index) {return new bendpointType(owner.getElementAt(info, index));}
			public bendpointType first() {return new bendpointType(owner.getElementFirst(info));}
			public bendpointType last(){return new bendpointType(owner.getElementLast(info));}
			public bendpointType append(){return new bendpointType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_bendpoint_Iterator(this);}
			public com.migration.xml.meta.Element getInfo() { return new com.migration.xml.meta.Element(info); }
		}
	
	public MemberElement_edge edge;

		public static class MemberElement_edge
		{
			public static class MemberElement_edge_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_edge member;
				public MemberElement_edge_Iterator(MemberElement_edge member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.migration.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					edgeType nx = new edgeType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.migration.xml.TypeBase owner;
			protected com.migration.typeinfo.MemberInfo info;
			public MemberElement_edge (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public edgeType at(int index) {return new edgeType(owner.getElementAt(info, index));}
			public edgeType first() {return new edgeType(owner.getElementFirst(info));}
			public edgeType last(){return new edgeType(owner.getElementLast(info));}
			public edgeType append(){return new edgeType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_edge_Iterator(this);}
			public com.migration.xml.meta.Element getInfo() { return new com.migration.xml.meta.Element(info); }
		}
	
	public MemberElement_label label;

		public static class MemberElement_label
		{
			public static class MemberElement_label_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_label member;
				public MemberElement_label_Iterator(MemberElement_label member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.migration.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					labelType nx = new labelType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.migration.xml.TypeBase owner;
			protected com.migration.typeinfo.MemberInfo info;
			public MemberElement_label (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public labelType at(int index) {return new labelType(owner.getElementAt(info, index));}
			public labelType first() {return new labelType(owner.getElementFirst(info));}
			public labelType last(){return new labelType(owner.getElementLast(info));}
			public labelType append(){return new labelType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_label_Iterator(this);}
			public com.migration.xml.meta.Element getInfo() { return new com.migration.xml.meta.Element(info); }
		}
	
	public MemberElement_node2 node2;

		public static class MemberElement_node2
		{
			public static class MemberElement_node2_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_node2 member;
				public MemberElement_node2_Iterator(MemberElement_node2 member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.migration.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					nodeType nx = new nodeType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.migration.xml.TypeBase owner;
			protected com.migration.typeinfo.MemberInfo info;
			public MemberElement_node2 (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public nodeType at(int index) {return new nodeType(owner.getElementAt(info, index));}
			public nodeType first() {return new nodeType(owner.getElementFirst(info));}
			public nodeType last(){return new nodeType(owner.getElementLast(info));}
			public nodeType append(){return new nodeType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_node2_Iterator(this);}
			public com.migration.xml.meta.Element getInfo() { return new com.migration.xml.meta.Element(info); }
		}
	
	public MemberElement_root_container root_container;

		public static class MemberElement_root_container
		{
			public static class MemberElement_root_container_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_root_container member;
				public MemberElement_root_container_Iterator(MemberElement_root_container member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.migration.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					root_containerType nx = new root_containerType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.migration.xml.TypeBase owner;
			protected com.migration.typeinfo.MemberInfo info;
			public MemberElement_root_container (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public root_containerType at(int index) {return new root_containerType(owner.getElementAt(info, index));}
			public root_containerType first() {return new root_containerType(owner.getElementFirst(info));}
			public root_containerType last(){return new root_containerType(owner.getElementLast(info));}
			public root_containerType append(){return new root_containerType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_root_container_Iterator(this);}
			public com.migration.xml.meta.Element getInfo() { return new com.migration.xml.meta.Element(info); }
		}

		public void setXsiType() {com.migration.xml.XmlTreeOperations.setAttribute(getNode(), "http://www.w3.org/2001/XMLSchema-instance", "xsi:type", "", "com.jbpm3processdocgpd");}
}
