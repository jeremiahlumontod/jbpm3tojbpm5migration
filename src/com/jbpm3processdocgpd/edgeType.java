////////////////////////////////////////////////////////////////////////
//
// edgeType.java
//
// This file was generated by XMLSpy 2009sp1 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//
////////////////////////////////////////////////////////////////////////

package com.jbpm3processdocgpd;


public class edgeType extends com.migration.xml.TypeBase
{
		public static com.migration.xml.meta.ComplexType getStaticInfo() { return new com.migration.xml.meta.ComplexType(com.jbpm3processdocgpd.jbpm3processdocgpd_TypeInfo.binder.getTypes()[com.jbpm3processdocgpd.jbpm3processdocgpd_TypeInfo._altova_ti_altova_edgeType]); }
	
	public edgeType(org.w3c.dom.Node init)
	{
		super(init);
		instantiateMembers();
	}
	
	private void instantiateMembers()
	{

		label= new MemberElement_label (this, com.jbpm3processdocgpd.jbpm3processdocgpd_TypeInfo.binder.getMembers()[com.jbpm3processdocgpd.jbpm3processdocgpd_TypeInfo._altova_mi_altova_edgeType._label]);
		bendpoint= new MemberElement_bendpoint (this, com.jbpm3processdocgpd.jbpm3processdocgpd_TypeInfo.binder.getMembers()[com.jbpm3processdocgpd.jbpm3processdocgpd_TypeInfo._altova_mi_altova_edgeType._bendpoint]);
	}
	// Attributes


	// Elements
	
	public MemberElement_label label;

		public static class MemberElement_label
		{
			public static class MemberElement_label_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_label member;
				public MemberElement_label_Iterator(MemberElement_label member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.migration.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					labelType nx = new labelType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.migration.xml.TypeBase owner;
			protected com.migration.typeinfo.MemberInfo info;
			public MemberElement_label (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public labelType at(int index) {return new labelType(owner.getElementAt(info, index));}
			public labelType first() {return new labelType(owner.getElementFirst(info));}
			public labelType last(){return new labelType(owner.getElementLast(info));}
			public labelType append(){return new labelType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_label_Iterator(this);}
			public com.migration.xml.meta.Element getInfo() { return new com.migration.xml.meta.Element(info); }
		}
	
	public MemberElement_bendpoint bendpoint;

		public static class MemberElement_bendpoint
		{
			public static class MemberElement_bendpoint_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_bendpoint member;
				public MemberElement_bendpoint_Iterator(MemberElement_bendpoint member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.migration.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					bendpointType nx = new bendpointType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.migration.xml.TypeBase owner;
			protected com.migration.typeinfo.MemberInfo info;
			public MemberElement_bendpoint (com.migration.xml.TypeBase owner, com.migration.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public bendpointType at(int index) {return new bendpointType(owner.getElementAt(info, index));}
			public bendpointType first() {return new bendpointType(owner.getElementFirst(info));}
			public bendpointType last(){return new bendpointType(owner.getElementLast(info));}
			public bendpointType append(){return new bendpointType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_bendpoint_Iterator(this);}
			public com.migration.xml.meta.Element getInfo() { return new com.migration.xml.meta.Element(info); }
		}
}
